(()=>{"use strict";class e{constructor(e){this.name=e,this.objectives=[]}getName(){return this.name}getObjectives(){return this.objectives}setObjectives(e){this.objectives=e}getObjective(e){return this.objectives.find((s=>s.getName()===e))}addObjective(e){this.objectives.find((s=>s.getName()===e.name))||this.objectives.push(e)}deleteObjective(e){let s=this.objectives.find((s=>s.getName()===e));this.objectives.splice(this.objectives.indexOf(s),1)}}class s{constructor(e,s,t){this.name=e,this.description=s,this.dueDate=t}getName(){return this.name}setName(e){this.name=e}getDescription(){return this.description}setDescription(e){this.description=e}getDueDate(){return this.dueDate}}class t{constructor(){this.missions=[],this.missions.push(new e("Today")),this.missions.push(new e("This Week"))}setMissions(e){this.missions=e}getMissions(){return this.missions}getMission(e){return this.missions.find((s=>s.getName()===e))}addMission(e){this.missions.find((s=>s.getName()===e.name))||this.missions.push(e)}deleteMission(e){let s=this.missions.find((s=>s.getName()===e));this.missions.splice(this.missions.indexOf(s),1)}}class i{saveQuestMenu(e){localStorage.setItem("questmenu",JSON.stringify(e))}getQuestMenu(){const i=Object.assign(new t,JSON.parse(localStorage.getItem("questmenu")));return i.setMissions(i.getMissions().map((s=>Object.assign(new e,s)))),i.getMissions().forEach((e=>e.setObjectives(e.getObjectives().map((e=>Object.assign(new s,e)))))),i}addMission(e){const s=this.getQuestMenu();s.addMission(e),this.saveQuestMenu(s)}deleteMission(e){const s=this.getQuestMenu();s.deleteMission(e),this.saveQuestMenu(s)}addObjective(e,s){const t=this.getQuestMenu();t.getMission(e).addObjective(s),this.saveQuestMenu(t)}deleteObjective(e,s){const t=this.getQuestMenu();t.getMission(e).deleteObjective(s),this.saveQuestMenu(t)}renameObjective(e,s,t){const i=this.getQuestMenu();i.getMission(e).getObjective(s).setName(t),this.saveQuestMenu(i)}}(()=>{document.querySelector(".main");const t=new i;let n=new e("Testing mission"),o=new e("2"),c=new e("3");t.addMission(n),t.addMission(o),t.addMission(c);let a=new s("Testing objective","this is for testing");t.addObjective(n.getName(),a),document.querySelector(".missions"),console.log(t.getQuestMenu())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,